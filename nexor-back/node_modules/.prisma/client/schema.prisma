// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Merchant model
model Merchant {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  walletAddress  String
  apiKey         String    @unique
  webhookUrl     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  payments       Payment[]
  invoices       Invoice[]
  customizations Json?
}

// Payment model
model Payment {
  id                 String        @id @default(uuid())
  merchantId         String
  merchant           Merchant      @relation(fields: [merchantId], references: [id])
  amount             Float
  amountUsd          Float
  sourceToken        String // Token used for payment (DOT, KSM, USDC, etc.)
  destinationToken   String // Token merchant receives
  sourceChain        String // Origin blockchain
  destinationChain   String // Destination blockchain
  sourceAddress      String // Customer wallet address
  destinationAddress String // Merchant wallet address
  status             PaymentStatus @default(PENDING)
  txHash             String?
  invoiceId          String?
  invoice            Invoice?      @relation(fields: [invoiceId], references: [id])
  metadata           Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

// Invoice model
model Invoice {
  id          String        @id @default(uuid())
  merchantId  String
  merchant    Merchant      @relation(fields: [merchantId], references: [id])
  amount      Float
  currency    String
  description String?
  status      InvoiceStatus @default(UNPAID)
  dueDate     DateTime?
  payments    Payment[]
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Token Price model for caching price data
model TokenPrice {
  id        String   @id @default(uuid())
  symbol    String   @unique
  usdPrice  Float
  updatedAt DateTime @updatedAt
}

// Payment status enum
enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Invoice status enum
enum InvoiceStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}
