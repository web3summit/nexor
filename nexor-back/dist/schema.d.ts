export declare const typeDefs = "#graphql\n  # Scalar types\n  scalar JSON\n  scalar DateTime\n\n  # Enums\n  enum PaymentStatus {\n    PENDING\n    PROCESSING\n    COMPLETED\n    FAILED\n  }\n\n  enum InvoiceStatus {\n    UNPAID\n    PARTIALLY_PAID\n    PAID\n    OVERDUE\n    CANCELLED\n  }\n\n  # Types\n  type Merchant {\n    id: ID!\n    name: String!\n    email: String!\n    walletAddress: String!\n    apiKey: String!\n    webhookUrl: String\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    payments: [Payment!]\n    invoices: [Invoice!]\n    customizations: JSON\n  }\n\n  type Payment {\n    id: ID!\n    merchantId: ID!\n    merchant: Merchant!\n    amount: Float!\n    amountUsd: Float!\n    sourceToken: String!\n    destinationToken: String!\n    sourceChain: String!\n    destinationChain: String!\n    sourceAddress: String!\n    destinationAddress: String!\n    status: PaymentStatus!\n    txHash: String\n    invoiceId: ID\n    invoice: Invoice\n    metadata: JSON\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  type Invoice {\n    id: ID!\n    merchantId: ID!\n    merchant: Merchant!\n    amount: Float!\n    currency: String!\n    description: String\n    status: InvoiceStatus!\n    dueDate: DateTime\n    payments: [Payment!]\n    metadata: JSON\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  type TokenPrice {\n    id: ID!\n    symbol: String!\n    usdPrice: Float!\n    updatedAt: DateTime!\n  }\n\n  # Input types\n  input CreateMerchantInput {\n    name: String!\n    email: String!\n    walletAddress: String!\n    webhookUrl: String\n    customizations: JSON\n  }\n\n  input UpdateMerchantInput {\n    name: String\n    email: String\n    walletAddress: String\n    webhookUrl: String\n    customizations: JSON\n  }\n\n  input CreatePaymentInput {\n    merchantId: ID!\n    amount: Float!\n    sourceToken: String!\n    destinationToken: String!\n    sourceChain: String!\n    destinationChain: String!\n    sourceAddress: String!\n    invoiceId: ID\n    metadata: JSON\n  }\n\n  input CreateInvoiceInput {\n    merchantId: ID!\n    amount: Float!\n    currency: String!\n    description: String\n    dueDate: DateTime\n    metadata: JSON\n  }\n\n  # Queries\n  type Query {\n    # Merchant queries\n    merchant(id: ID!): Merchant\n    merchantByApiKey(apiKey: String!): Merchant\n    merchants: [Merchant!]!\n\n    # Payment queries\n    payment(id: ID!): Payment\n    paymentsByMerchant(merchantId: ID!): [Payment!]!\n    payments: [Payment!]!\n\n    # Invoice queries\n    invoice(id: ID!): Invoice\n    invoicesByMerchant(merchantId: ID!): [Invoice!]!\n    invoices: [Invoice!]!\n\n    # Token price queries\n    tokenPrice(symbol: String!): TokenPrice\n    tokenPrices: [TokenPrice!]!\n  }\n\n  # Mutations\n  type Mutation {\n    # Merchant mutations\n    createMerchant(input: CreateMerchantInput!): Merchant!\n    updateMerchant(id: ID!, input: UpdateMerchantInput!): Merchant!\n    deleteMerchant(id: ID!): Boolean!\n    regenerateApiKey(id: ID!): String!\n\n    # Payment mutations\n    createPayment(input: CreatePaymentInput!): Payment!\n    updatePaymentStatus(id: ID!, status: PaymentStatus!, txHash: String): Payment!\n\n    # Invoice mutations\n    createInvoice(input: CreateInvoiceInput!): Invoice!\n    updateInvoiceStatus(id: ID!, status: InvoiceStatus!): Invoice!\n    deleteInvoice(id: ID!): Boolean!\n  }\n";
//# sourceMappingURL=schema.d.ts.map